# syntax = docker/dockerfile:1.2

ARG BASE_IMAGE=continuumio/miniconda3
ARG PYTHON_VERSION=3.8


FROM opencv:4.3.0 as opencv

FROM ${BASE_IMAGE} as build

ENV PYTHONUNBUFFERED TRUE


COPY  animate/conda-env.txt conda-env.txt
COPY  animate/requirements.txt requirements.txt
RUN --mount=type=cache,target=/opt/conda/pkgs \
    conda create --name sketch_animate --file conda-env.txt
SHELL ["conda","run","-n","sketch_animate","/bin/bash","-c"]

RUN --mount=type=cache,target=/opt/conda/pkgs \
    --mount=type=cache,target=/root/.cache/pip \
    pip install -r requirements.txt  \
    && pip install flask flask_cors gunicorn \
    && pip install ffmpeg-python==0.2.0 \
    && pip install shapely==1.7.1 \
    && conda install -c conda-forge conda-pack


# Use conda-pack to create a standalone enviornment
# in /venv:
RUN conda-pack -n sketch_animate -o /tmp/env.tar 
RUN mkdir /venv && cd /venv && tar xf /tmp/env.tar && \
    rm /tmp/env.tar

# Copy our compiled opencv library built using the following command
# ```docker build -f Dockerfile.opencv -t opencv:4.3.0 .```
# COPY --from=opencv /usr/local/lib/python3.7/dist-packages/cv2.so /venv/lib/python3.7/site-packages/cv2.so
COPY --from=opencv /usr/local/lib/python3.7/dist-packages/ /venv/lib/python3.7/site-packages/
COPY --from=opencv /root/opencv-4.3.0/build/lib/ /venv/lib/

# We've put venv in same path it'll be in final image,
# so now fix up paths:
RUN /venv/bin/conda-unpack

# Remove unnecessary python files. https://uwekorn.com/2021/03/01/deploying-conda-environments-in-docker-how-to-do-it-right.html
RUN cd /venv \
    && find -name '*.a' -delete \
    && rm -rf /venv/conda-meta \
    && rm -rf /venv/include \
    && rm -rf /venv/bin/sqlite3 \
    && rm -rf /venv/bin/openssl \
    && find /venv/ -name '__pycache__' -type d -exec rm -rf '{}' '+' \
    &&  find /venv/lib/python3.7/site-packages -name 'tests' -type d -exec rm -rf '{}' '+'  


# The runtime-stage image; we can use Debian as the
# base image since the Conda env also includes Python
# for us.
FROM ubuntu:18.04 AS animation_runtime

ENV PYTHONUNBUFFERED TRUE

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked --mount=type=cache,target=/var/lib/apt \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
    ca-certificates \
    # curl \
    # python3 \
    # python3-dev \
    # git \ 
    # zsh \
    # gcc \ 
    # g++ \
    libtbb2 \
    python3-opengl \
    libglfw3 \ 
    libglfw3-dev \
    libglew2.0 \
    libgl1-mesa-glx \
    libosmesa6 \
    libglib2.0-0 \
    ffmpeg \
    && rm -rf /var/lib/apt/lists/*


RUN useradd -m animation-server
USER animation-server
WORKDIR /home/animation-server


# Copy /venv from the previous stage:
COPY --from=build /venv /venv
ENV PATH /venv/bin/:${PATH}

# Ensure sahred opencv libs are linked 
RUN echo "/venv/lib" > /etc/ld.so.conf.d/opencv.conf \
    && ldconfig

RUN mkdir -p /home/animation-server/tmp \
    && mkdir -p /home/animation-server/animate \
    && mkdir -p /home/animation-server/animate/output \
    && mkdir -p /home/animation-server/animate/sketch_animate/output


COPY --chown=animation-server:animation-server animate animate/


# "glfw", "egl", or "osmesa" from https://github.com/deepmind/dm_control#rendering
ENV MUJOCO_GL="osmesa"

ENV TEMP=/home/animation-server/tmp


# Define the default command.
COPY --chown=animation-server:animation-server animate/flask/run.sh /home/animation-server/animate/flask/run.sh
RUN chmod +x /home/animation-server/animate/flask/run.sh
WORKDIR /home/animation-server/animate/flask 
CMD [ "/home/animation-server/animate/flask/run.sh" ]

# CMD [ "sleep", "infinity" ]

