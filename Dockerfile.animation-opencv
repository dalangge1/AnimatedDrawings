# syntax = docker/dockerfile:1.2

ARG BASE_IMAGE=continuumio/miniconda3
ARG PYTHON_VERSION=3.8
ARG BUILD_CONFIG=release

FROM ubuntu:18.04 as opencv

#  FROM: https://www.swiftlane.com/blog/generating-mp4s-using-opencv-python-with-the-avc1-codec/

WORKDIR /root

ENV OPENCV_VERSION=4.3.0 \
    PYTHON_VERSION=3.8 \
    PYTHON_VERSION_SHORT=3

ENV PATH=/usr/lib/ccache:$PATH

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt \ 
    apt-get update && \
    apt-get remove -y python ffmpeg && \
    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
    build-essential \
    cmake \
    ccache \
    libjack-jackd2-dev \
    libmp3lame-dev \
    libopencore-amrnb-dev \
    libopencore-amrwb-dev \
    libsdl1.2-dev \
    libtheora-dev \
    libva-dev \
    libvdpau-dev \
    libvorbis-dev \
    libx11-dev \
    libxfixes-dev \
    libxvidcore-dev \
    texi2html \
    zlib1g-dev \
    wget \
    unzip \
    yasm \
    pkg-config \
    libswscale-dev \
    libtbb2 \
    libtbb-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavformat-dev \
    python${PYTHON_VERSION} \
    python${PYTHON_VERSION}-dev \
    python-numpy \
    python3-pip \
    libpq-dev \
    x264 \
    libx264-dev \
    ffmpeg && \
    rm -rf /var/lib/apt/lists/*

RUN  --mount=type=cache,target=/root/.cache \ 
    python${PYTHON_VERSION} -m pip install pip setuptools && \
    python${PYTHON_VERSION} -m pip install  Cython 

RUN python${PYTHON_VERSION} -m pip install boto3 



# RUN update-alternatives --remove-all python
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${PYTHON_VERSION} 1
RUN update-alternatives --install /usr/bin/python python /usr/bin/python${PYTHON_VERSION} 1

RUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \
    unzip ${OPENCV_VERSION}.zip && \
    mkdir opencv-${OPENCV_VERSION}/build


WORKDIR /root/opencv-${OPENCV_VERSION}/build
RUN apt-get remove -y python3.6 

RUN --mount=type=cache,target=/root/.ccache \
    cmake \
    # -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
    -DBUILD_TIFF=ON \
    -DBUILD_opencv_java=OFF \
    -DWITH_CUDA=OFF \
    -DWITH_OPENGL=ON \
    -DWITH_OPENCL=ON \
    -DWITH_IPP=ON \
    -DWITH_TBB=ON \
    -DWITH_EIGEN=ON \
    -DWITH_V4L=ON \
    -DBUILD_TESTS=OFF \
    -DBUILD_PERF_TESTS=OFF \
    -DCMAKE_BUILD_TYPE=RELEASE \
    -DCMAKE_INSTALL_PREFIX=$(python${PYTHON_VERSION} -c "import sys; print(sys.prefix)") \
    -DPYTHON3_EXECUTABLE=$(which python${PYTHON_VERSION}) \
    -DPYTHON3_INCLUDE_DIR=$(python${PYTHON_VERSION} -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") \
    -DPYTHON3_PACKAGES_PATH=$(python${PYTHON_VERSION} -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") \
    -DPYTHON3_DEFAULT_EXECUTABLE=$(which python${PYTHON_VERSION}) \
    -DBUILD_NEW_PYTHON_SUPPORT=ON \
    -DBUILD_opencv_python3=yes \
    -DHAVE_opencv_python3=ON \
    -DBUILD_opencv_gapi=OFF \
    -DPYTHON3_NUMPY_INCLUDE_DIRS=/usr/local/lib/python${PYTHON_VERSION}/dist-packages/numpy/core/include \
    .. \
    && make install -j8

RUN mv \
    /root/opencv-${OPENCV_VERSION}/build/lib/python3/cv2.*.so \
    /usr/local/lib/python${PYTHON_VERSION}/dist-packages/cv2.so

# RUN unlink /usr/bin/python && ln -s /usr/bin/python3 /usr/bin/python

WORKDIR /root

COPY animate/codec_tests codec_tests

CMD ["python3", "codec_tests/encoder_test.py"]


FROM ${BASE_IMAGE} as build

ENV PYTHONUNBUFFERED TRUE
ENV OPENCV_VERSION=4.3.0 \
    PYTHON_VERSION=3.8 \
    PYTHON_VERSION_SHORT=3



COPY  animate/conda-env.txt conda-env.txt
COPY  animate/requirements.txt requirements.txt
RUN --mount=type=cache,target=/opt/conda/pkgs \
    conda create --name sketch_animate --file conda-env.txt
SHELL ["conda","run","-n","sketch_animate","/bin/bash","-c"]

RUN --mount=type=cache,target=/opt/conda/pkgs \
    --mount=type=cache,target=/root/.cache/pip \
    pip install -r requirements.txt  \
    # Add the following line to enable functiontrace.
    # && pip install functiontrace \
    && pip install flask flask_cors gunicorn  \ 
    && pip install ffmpeg-python==0.2.0 \
    && pip install shapely==1.7.1 \
    && conda install -c conda-forge conda-pack


# Use conda-pack to create a standalone enviornment
# in /venv:
RUN conda-pack -n sketch_animate -o /tmp/env.tar 
RUN mkdir /venv && cd /venv && tar xf /tmp/env.tar && \
    rm /tmp/env.tar

# Copy our compiled opencv library built using the following command
# ```docker build -f Dockerfile.opencv -t opencv:4.3.0 .```
# COPY --from=opencv /usr/local/lib/python${PYTHON_VERSION}/dist-packages/cv2.so /venv/lib/pytho${PYTHON_VERSION}/site-packages/cv2.so
COPY --from=opencv /usr/local/lib/python${PYTHON_VERSION}/dist-packages/ /venv/lib/python3.7/site-packages/
COPY --from=opencv /root/opencv-${OPENCV_VERSION}/build/lib/ /venv/lib/

# We've put venv in same path it'll be in final image,
# so now fix up paths:
RUN /venv/bin/conda-unpack

# Remove unnecessary python files. https://uwekorn.com/2021/03/01/deploying-conda-environments-in-docker-how-to-do-it-right.html
RUN cd /venv \
    && find -name '*.a' -delete \
    && rm -rf /venv/conda-meta \
    && rm -rf /venv/include \
    && rm -rf /venv/bin/sqlite3 \
    && rm -rf /venv/bin/openssl \
    && find /venv/ -name '__pycache__' -type d -exec rm -rf '{}' '+' \
    &&  find /venv/lib/python3.7/site-packages -name 'tests' -type d -exec rm -rf '{}' '+'  


# The runtime-stage image; we can use Debian as the
# base image since the Conda env also includes Python
# for us.
FROM ubuntu:18.04 AS release_packages

ENV PYTHONUNBUFFERED TRUE

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked --mount=type=cache,target=/var/lib/apt \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
    ca-certificates \
    curl \
    sudo \
    python3-pip \
    # curl \
    # python3 \
    # python3-dev \
    # git \ 
    # zsh \
    # gcc \ 
    # g++ \
    libtbb2 \
    python3-opengl \
    libglfw3 \ 
    libglfw3-dev \
    libglew2.0 \
    libgl1-mesa-glx \
    libosmesa6 \
    libglib2.0-0 \
    ffmpeg \
    && rm -rf /var/lib/apt/lists/*



# Dev runtime is the same as realase
FROM release_packages as development_packages
# Create an image for profiling python code using function trace
FROM release_packages as profile_packages

ENV RUSTUP_HOME=/usr/local/rustup CARGO_HOME=/usr/local/cargo PATH=/usr/local/cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

# Install Rust needed for functiontrace
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked --mount=type=cache,target=/var/lib/apt\
    /bin/sh -c set -eux;     \
    apt-get update;  \
    apt-get install -y --no-install-recommends \
    ca-certificates \
    gcc \
    libc6-dev \
    wget \
    ;\
    dpkgArch="$(dpkg --print-architecture)"; \
    case "${dpkgArch##*-}" in \
    amd64) rustArch='x86_64-unknown-linux-gnu' ;; \
    arm64) rustArch='aarch64-unknown-linux-gnu' ;; \
    *) echo >&2 "unsupported architecture: ${dpkgArch}";\
    exit 1 ;; \ 
    esac; \
    url="https://static.rust-lang.org/rustup/dist/${rustArch}/rustup-init"; \
    wget "$url"; \
    chmod +x rustup-init; \
    ./rustup-init -y --no-modify-path --default-toolchain nightly; \ 
    rm rustup-init; \
    chmod -R a+w $RUSTUP_HOME $CARGO_HOME; \
    rustup --version; \
    cargo --version; \
    rustc --version; \
    apt-get remove -y --auto-remove         wget         ;\
    rm -rf /var/lib/apt/lists/*; # buildkit


# Check cargo is visible
RUN cargo --help

# install function trace. Note Pip package already installed
RUN cargo install functiontrace-server

FROM ${BUILD_CONFIG}_packages as common_runtime

RUN mkdir -p /home/animation-server/tmp



# Copy /venv from the previous stage:
COPY --from=build /venv /venv
ENV PATH /venv/bin/:${PATH}

# Ensure sahred opencv libs are linked 
RUN echo "/venv/lib" > /etc/ld.so.conf.d/opencv.conf \
    && ldconfig


FROM common_runtime as release_runtime

RUN useradd -m animation-server
USER animation-server
WORKDIR /home/animation-server


COPY --chown=animation-server:animation-server animate animate/


# Define the default command.


FROM common_runtime as develoment_runtime

ARG USER_ID
ARG GROUP_ID

# RUN addgroup --gid $GROUP_ID animation-server
RUN adduser --disabled-password --gecos '' --uid $USER_ID  animation-server 
# --gid $GROUP_ID
USER animation-server
#RUN python3 -m pip install boto3

#  don't need to copy the code as it'll be mounted on the local volume
FROM develoment_runtime as profile_runtime


FROM ${BUILD_CONFIG}_runtime as animation_runtime
#RUN apt-get update
#RUN apt-get install -y sudo 
#RUN apt-get install -y python3-pip
#RUN sudo python3 -m pip install boto3
WORKDIR /home/animation-server/animate/flask 
COPY --chown=animation-server:animation-server animate/flask/run.sh /home/animation-server/animate/flask/run.sh
#RUN apt-get install -y python3-pip
#RUN python3 -m pip install boto3 --user
RUN chmod +x /home/animation-server/animate/flask/run.sh

#RUN chmod +x /home/animation-server/animate/flask/run.sh
CMD [ "/home/animation-server/animate/flask/run.sh" ]
#CMD [ "sleep", "infinity" ]