# syntax = docker/dockerfile:1.2

ARG BUILD_IMAGE=continuumio/miniconda3
ARG PYTHON_VERSION=3.6

FROM ${BUILD_IMAGE} as build

ENV PYTHONUNBUFFERED TRUE

RUN mkdir /src
WORKDIR /src

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked --mount=type=cache,target=/var/lib/apt \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
    ca-certificates \
    build-essential \
    gcc \
    && rm -rf /var/lib/apt/lists/* 

# Create Conda environment for Building AlphaPose

RUN --mount=type=cache,target=/opt/conda/pkgs \
    # Copy always as linking to cached conda packages with not work with docker cache mounts
    export CONDA_ALWAYS_COPY=true && \ 
    conda create  -vv --name alphapose_build python=3.6 -y
# Activate new shell with conda env
SHELL ["conda", "run", "-n", "alphapose_build", "/bin/bash", "-c"]

RUN  --mount=type=cache,target=/opt/conda/pkgs \
    export CONDA_ALWAYS_COPY=true && \
    conda install -vvv pytorch-cpu==1.1.0 torchvision-cpu==0.3.0 cpuonly -c pytorch  \
    && conda install -vvv cython numpy \
    && conda clean -vvv -afy

ENV ALPHAPOSE_PATH=/src/AlphaPose 


COPY AlphaPose AlphaPose/

# # Compile alphapose
RUN cd AlphaPose \
    && python3 setup.py build


# Create Conda environment for Running AlphaPose 
RUN --mount=type=cache,target=/opt/conda/pkgs \
    export CONDA_ALWAYS_COPY=true && \
    conda create -vv --name alphapose python=3.6 -y
# Activate new shell with conda env
SHELL ["conda", "run", "-n", "alphapose", "/bin/bash", "-c"]

# The following is from here: https://github.com/MVIG-SJTU/AlphaPose/blob/master/docs/INSTALL.md \
RUN  --mount=type=cache,target=/opt/conda/pkgs \
    # --mount=type=cache,target=/root/.cache/pip \
    # --mount=type=cache,target=/root/.local \
    export CONDA_ALWAYS_COPY=true && \
    conda config --append channels pytorch  && \
    conda config --append channels conda-forge && \
    conda install -vvv \
    pytorch-cpu==1.1.0 \
    torchvision-cpu==0.3.0 \
    cpuonly \
    torchserve==0.4.0  \
    matplotlib \
    conda-pack \
    opencv \
    pyyaml \
    scipy==1.1.0 \
    six \
    terminaltables \
    tqdm \
    easydict \
    munkres   \
    && export CUDA_HOME=/usr/local/cuda \
    && export ALPHAPOSE_PATH=/src/AlphaPose \
    # clean up after conda install from https://jcristharif.com/conda-docker-tips.html
    && conda clean -afy 



# Use conda-pack to create a standalone enviornment
# in /venv:
RUN conda-pack -n alphapose -o /tmp/env.tar 
RUN mkdir /venv && cd /venv && tar xf /tmp/env.tar && \
    rm /tmp/env.tar

# We've put venv in same path it'll be in final image,
# so now fix up paths:
RUN /venv/bin/conda-unpack

# Add the compile alphapose lib to final venv
RUN cp -r AlphaPose/build/lib/* /venv/lib/python3.6/

# Remove unnecessary python files. https://uwekorn.com/2021/03/01/deploying-conda-environments-in-docker-how-to-do-it-right.html
RUN cd /venv \
    && find -name '*.a' -delete \
    && rm -rf /venv/conda-meta \
    && rm -rf /venv/include \
    && rm -rf /venv/bin/sqlite3 \
    && rm -rf /venv/bin/openssl \
    && find /venv/ -name '__pycache__' -type d -exec rm -rf '{}' '+' \
    &&  find /venv/lib/python3.6/site-packages -name 'tests' -type d -exec rm -rf '{}' '+'  \
    &&  find /venv/lib/python3.6/site-packages/torch -name 'test' -type d -exec rm -rf '{}' '+' 



# The runtime-stage image; we can use Debian as the
# base image since the Conda env also includes Python
# for us.

FROM ubuntu:18.04 AS runtime_base


RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
    ca-certificates \
    default-jre \
    curl \
    && rm -rf /var/lib/apt/lists/* 

RUN useradd -m ap-server 
USER ap-server
WORKDIR /home/ap-server

# Copy /venv from the previous stage:
COPY --from=build /venv /venv

COPY --chown=ap-server:ap-server torchserve_ap torchserve_ap/

ENV PATH /venv/bin/:${PATH}
# Define the default command.

# Create a test Alphapose Image
FROM runtime_base AS runtime_test

# Execute tests duiring build
# ```
# docker buildx build -f Dockerfile.alphapose -t alphapose:test --target runtime_test . && docker run alphapose:test bash ./torchserve_ap/scripts/docker_test.sh
# ```
RUN "./torchserve_ap/scripts/docker_test.sh"


FROM runtime_base AS alphapose_runtime
CMD [ "./torchserve_ap/torchserve_start.sh" ]

