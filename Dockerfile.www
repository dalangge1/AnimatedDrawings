# syntax = docker/dockerfile:1.2
# Standalone AWS to deploy the web app to an s3 bucket


# ####################
#  Build and Deploy in 1 step - execute the following comnmand
# ####################

# DOCKER_BUILDKIT=1 docker-compose  -f docker-compose.aws-dev.yml --env-file .env.aws-beta build www_deploy .&& DOCKER_BUILDKIT=1 docker-compose  -f docker-compose.aws-dev.yml --env-file .env.aws-beta up www_deploy



# ####################
#  Web App - Build
# ####################
FROM node:16.8.0 as builder

ARG SKETCH_API_ENDPOINT
ARG VIDEO_CDN_URL
ARG ENABLE_UPLOAD
ARG REACT_APP_GOOGLE_ANALYTICS_ID

WORKDIR /usr/src/app
COPY ui/www/package.json ui/www/yarn.lock ./
RUN --mount=type=cache,target=/usr/src/app/.npm --mount=type=cache,target=/usr/src/app/node_modules \
    yarn
COPY ui/www ./
RUN --mount=type=cache,target=/usr/src/app/.npm --mount=type=cache,target=/usr/src/app/node_modules \
    yarn build

# Setup up dynamically created Environment config
# COPY ui/www/.env .
RUN echo REACT_APP_API_HOST=${SKETCH_API_ENDPOINT} > .env \
    && echo VIDEO_URL=${VIDEO_CDN_URL} >> .env \
    && echo ENABLE_UPLOAD=${ENABLE_UPLOAD} >> .env \
    && echo REACT_APP_GOOGLE_ANALYTICS_ID=${REACT_APP_GOOGLE_ANALYTICS_ID} >> .env 
COPY ui/www/env.sh .
RUN chmod +x ./env.sh
RUN ./env.sh
RUN cp env-config.js build/


# ####################
#  Web App - S3 deploy
###################### 
#Create a new container from a linux base image that has the aws-cli installed
FROM amazon/aws-cli

ARG AWS_S3_WWW_BUCKET
ARG AWS_CLOUDFRONT_DISTRIBUTION
ENV AWS_S3_WWW_BUCKET_URL s3://${AWS_S3_WWW_BUCKET}

#Using the alias defined for the first container, copy the contents of the build folder to this container
COPY --from=builder /usr/src/app/build .

#Set the default command of this container to push the files from the working directory of this container to our s3 bucket 
# Override enrypoint as the json array mode does not support using env vars
# see https://docs.docker.com/engine/reference/builder/#cmd
RUN /usr/local/bin/aws s3 sync ./ $AWS_S3_WWW_BUCKET_URL


RUN /usr/local/bin/aws cloudfront create-invalidation --distribution-id ${AWS_CLOUDFRONT_DISTRIBUTION} --paths "/*"

